class Background {
    constructor() {
        this.canvas = document.createElement('canvas');
        this.ctx = this.canvas.getContext('2d');
        document.querySelector('.background-container').appendChild(this.canvas);
        
        // 初始化星星
        this.stars = Array(200).fill().map(() => ({
            x: Math.random() * window.innerWidth,
            y: Math.random() * window.innerHeight,
            size: Math.random() * 2,
            speed: Math.random() * 0.5 + 0.1
        }));
        
        // 初始化建筑物
        this.buildings = this.initBuildings();
        
        // 初始化数据层
        this.dataParticles = Array(50).fill().map(() => ({
            x: Math.random() * window.innerWidth,
            y: Math.random() * window.innerHeight,
            text: Math.random() > 0.5 ? '1' : '0',
            speed: Math.random() * 2 + 1
        }));
        
        this.init();
        this.animate();
    }

    initBuildings() {
        // 简化的建筑物数据
        return [
            { x: 100, y: 300, width: 60, height: 200 },
            { x: 200, y: 250, width: 80, height: 250 },
            { x: 350, y: 200, width: 100, height: 300 },
            // 添加更多建筑物...
        ];
    }

    drawStars() {
        this.ctx.fillStyle = '#FFF';
        this.stars.forEach(star => {
            this.ctx.beginPath();
            this.ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
            this.ctx.fill();
            
            // 移动星星
            star.y += star.speed;
            if (star.y > this.canvas.height) {
                star.y = 0;
                star.x = Math.random() * this.canvas.width;
            }
        });
    }

    drawCampus() {
        this.ctx.strokeStyle = 'rgba(0, 168, 255, 0.5)';
        this.ctx.lineWidth = 2;
        
        this.buildings.forEach(building => {
            // 绘制建筑轮廓
            this.ctx.beginPath();
            this.ctx.rect(building.x, building.y, building.width, building.height);
            this.ctx.stroke();
            
            // 添加发光效果
            const gradient = this.ctx.createLinearGradient(
                building.x, building.y,
                building.x, building.y + building.height
            );
            gradient.addColorStop(0, 'rgba(0, 168, 255, 0.2)');
            gradient.addColorStop(1, 'rgba(0, 168, 255, 0)');
            this.ctx.fillStyle = gradient;
            this.ctx.fill();
        });
    }

    drawDataLayer() {
        this.ctx.font = '12px monospace';
        this.ctx.fillStyle = 'rgba(0, 255, 0, 0.3)';
        
        this.dataParticles.forEach(particle => {
            this.ctx.fillText(particle.text, particle.x, particle.y);
            
            // 移动数据粒子
            particle.y += particle.speed;
            if (particle.y > this.canvas.height) {
                particle.y = 0;
                particle.x = Math.random() * this.canvas.width;
            }
        });
    }

    animate() {
        this.ctx.fillStyle = 'rgba(0, 27, 58, 0.1)';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        this.drawStars();
        this.drawCampus();
        this.drawDataLayer();
        
        requestAnimationFrame(() => this.animate());
    }
}